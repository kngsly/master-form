@page "/admin/experiment/create"
@page "/admin/experiment/edit/{slug}"


@using master_form_blazor_server.Data;
@inject ExperimentService InjectedExperimentService;
@inject NotificationService NotificationService
@inject DialogService DialogService

@{
    bool Editing = !string.IsNullOrEmpty(slug);
}

@if (AuthContext.IsAnAdmin)
{
    <PageTitle>@(Editing ? "Editing experiment" : "Creating experiment")</PageTitle>
    <h1 class="mb-4">@(Editing ? "Editing experiment" : "Creating experiment")</h1>

    @if (experiment != null)
    {
        <RadzenCard>

            <div class="small fw-bold mb-1">Enabled</div>
            <RadzenSwitch @bind-Value=@experiment.Enabled class="mb-3" />

            <div class="small fw-bold mb-1">URL <span class="">(required)</span></div>
            <RadzenTextBox Placeholder="Unique link for sharing this experiment publicly" @bind-Value=@experiment.Slug class="w-100 mb-3" />

            <div class="small fw-bold mb-1">Title</div>
            <RadzenTextBox Placeholder="" @bind-Value=@experiment.Title class="w-100 mb-3" />

            <div class="small fw-bold mb-1">Description</div>
            <RadzenTextArea Placeholder="" @bind-Value=@experiment.Description class="w-100 mb-3" />

            <div class="small fw-bold mb-1">Inputs</div>
            @if (experiment.Inputs.Any())
            {
                foreach (var input in experiment.Inputs)
                {
                    <div class="row py-3 bg-light border rounded mb-2">
                        <div class="col-md-6">
                            <div class="small fw-bold mb-1">Label</div>
                            <RadzenTextBox Placeholder="Custom label" @bind-Value=@input.Label class="w-100 mb-2" />

                            <div class="small fw-bold mb-1">Placeholder</div>
                            <RadzenTextBox Placeholder="Custom placeholder" @bind-Value=@input.Hint class="w-100 mb-2" />

                            <div class="small fw-bold mb-1">Input type</div>
                            <RadzenDropDown AllowClear="false" TValue="InputType" Data=@InputTypes @bind-Value="@input.InputType" class="w-100 mb-2" />

                            @if (input.InputType == InputType.Dropdown)
                            {
                                if (input.Options == null)
                                {
                                    input.Options = new List<string>();
                                }
                                <div class="border p-1 rounded">
                                    @if (input.Options.Any())
                                    {
                                        for (var i = 0; i < input.Options.Count; i++)
                                        {
                                            var option = input.Options[i];

                                            <RadzenCard class="mb-2">
                                                <div class="row">
                                                    <div class="col-10">
                                                        <div>@option</div>
                                                    </div>
                                                    <div class="col-2 text-end">
                                                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" class="px-1" Click=@(() => {
                                                          input.Options.RemoveAt(i);
                                                            StateHasChanged();
                                                        }) />
                                                    </div>
                                                </div>
                                            </RadzenCard>
                                        }
                                    }
                                    <RadzenTextBox Placeholder="Add a new record here" @bind-Value=@NewRecord class="w-100 mb-1" />
                                    <RadzenButton Click=@(args => { input.Options.Add(NewRecord); NewRecord = ""; }) Text="Add New" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Secondary" />
                                </div>
                            }

                            <RadzenButton ButtonStyle=ButtonStyle.Danger
                          Text=@("Delete")
                          Click=@(() => RemoveInput(input)) />
                        </div>
                        <div class="col-md-6" style="pointer-events: none;">
                            <div class="fw-bold small">Preview</div>
                            <RadzenCard>
                                <master_form_blazor_server.Shared.Components.ExperimentInput input=@(input) Onchange=@((str) => input.Value = str ) />
                            </RadzenCard>
                        </div>
                    </div>
                }
            }

            <RadzenButton Click=@AddNewInput Text="Add new input" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />

            <RadzenButton class="mt-4 d-block"
                  ButtonStyle=ButtonStyle.Success
                  Icon="save"
                  Text=@(Editing ? "Save & update experiment" : "Create experiment")
                  Click=Submit />

        </RadzenCard>


        @if (!Editing)
        {
            // Allow to delete or disable experiment
        }
    }
}
else
{
    <PageTitle>You must be admin.</PageTitle>
    <p><em>You must be admin to experiment.</em></p>
}

@code {
    [Parameter]
    public string? slug { get; set; }

    public string NewRecord = "";
    IEnumerable<InputType> InputTypes = Enum.GetValues(typeof(InputType)).Cast<InputType>();
    public bool loaded = false;
    private Data.Experiment experiment = new Data.Experiment();

    void OnChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        NotificationService.Notify(
           new NotificationMessage { Severity = NotificationSeverity.Info, Summary = str.ToString(), Detail = "nice", Duration = 5000 }
       );
    }

    async void AddNewInput()
    {
        if (!experiment.Inputs.Any())
            experiment.Inputs = new List<Data.ExperimentFormInput>();

        experiment.Inputs.Add(new ExperimentFormInput() { Label = "New input", InputType = InputType.Text });
    }

    async void RemoveInput(Data.ExperimentFormInput target)
    {
        if (experiment.Inputs.Any())
        {
            if (experiment.Inputs.Contains(target))
            {
                var Confirm = await DialogService.Confirm("Are you sure you want to delete this input?", "Deleting input", new ConfirmOptions() { OkButtonText = "Delete", CancelButtonText = "Back" });

                if (Confirm.HasValue && Confirm.Value)
                {
                    experiment.Inputs.Remove(target);
                    StateHasChanged();
                }
            }
            else
            {
                NotificationService.Notify(
                    new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Failed to delete", Detail = "We were unable to identify the desired record.", Duration = 5000 }
                );
            }
        }
    }

    async void Submit()
    {
        var Response = await InjectedExperimentService.WriteExperimentToFile(experiment, slug);

        NotificationService.Notify(
            new NotificationMessage { Severity = Response.Ok ? NotificationSeverity.Success : NotificationSeverity.Error, Summary = "Experiment submission", Detail = Response.Message ?? "Unknown error", Duration = 5000 }
        );

        if (Response.Ok)
        {
            await Task.Delay(500); // Simulate delay/give time to read dialog
            NavManager.NavigateTo($"/experiment/{experiment.Slug}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(slug))
        {
            experiment = await InjectedExperimentService.GetExperiment(slug, AuthContext.IsAnAdmin);
        }


        loaded = true;
        StateHasChanged();
    }
}
