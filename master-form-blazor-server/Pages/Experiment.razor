@page "/experiment/{slug}"

<PageTitle>Experiment</PageTitle>

@using master_form_blazor_server.Data;
@inject ExperimentService InjectedExperimentService;
@inject NotificationService NotificationService

@if (loaded == false)
{
    <p><em>Loading...</em></p>
}
else if (experiment == null)
{

    <p>Experiment not found, sorry about that.</p>
}
else
{
    @if (AuthContext.IsAnAdmin)
    {
        <RadzenCard>
            <h3 class="h5">Hey Admin, you can manage this page!</h3>
            <RadzenButton ButtonStyle=ButtonStyle.Primary Click=@(() => NavManager.NavigateTo($"/admin/experiment/edit/{experiment.Slug}")) Text="Edit experiment" />
        </RadzenCard>
    }

    <div class="pt-5 pb-3">
        <h1>@(string.IsNullOrEmpty(experiment.Title) ? experiment.Slug : experiment.Title)</h1>
        @if (!string.IsNullOrEmpty(experiment.Description))
        {
            <p style="white-space: pre-line;">@experiment.Description</p>
        }
    </div>
    <RadzenCard class="mt-5" Style="max-width: 680px;">
        @if (responded.Equals(false))
        {

            @if (experiment.Inputs.Any())
            {
                foreach (var input in experiment.Inputs)
                {
                    // Load inputs...
                    <master_form_blazor_server.Shared.Components.ExperimentInput input=@(input) Onchange=@((str) => input.Value = str ) />
                }
            }

            @if(experiment.Enabled)
            {
                <RadzenButton IsBusy=@busy ButtonStyle=ButtonStyle.Secondary Click=@Submit Icon="save" Text="Complete form" />
            }
            else
            {
                <div class="alert alert-warning">This experiment is not enabled. If you are an admin click "Edit experiment" and toggle "Enabled" above to make changes.</div>
            }
        }
        else
        {
            <div class="text-center">
                <h3>Thank you!</h3>
                <p>Your submission has been received.</p>
            </div>
        }
    </RadzenCard>
}

@code {
    [Parameter]
    public string slug { get; set; }

    private bool responded; // after someone has responded
    private bool busy; // busy loading indicator (ux)
    private bool loaded; // did we already load this experiment
    private Data.Experiment? experiment;

    async void Submit()
    {
        if (experiment != null)
        {
            busy = true;
            StateHasChanged();

            var Response = await InjectedExperimentService.SubmitExperimentForm(slug, experiment.Inputs);

            // Show response
            NotificationService.Notify(
                new NotificationMessage { Severity = Response.Ok ? NotificationSeverity.Success : NotificationSeverity.Error, Summary = "Experiment submission", Detail = Response.Message ?? "Unknown error", Duration = 5000 }
            );

            responded = Response.Ok; // If response was successful, it will be marked as responded.

            // Stop busy indicator
            busy = false;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        experiment = await InjectedExperimentService.GetExperiment(slug, AuthContext.IsAnAdmin);

        if (experiment != null) // Experiment found
        {
            // Add default inputs to start of form
            experiment.Inputs.InsertRange(0, ExperimentFormBuilderService.DefaultInputs());
        }

        loaded = true;
        StateHasChanged();
    }
}
